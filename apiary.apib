FORMAT: 1A
HOST: https://petstore.swagger.io

# Swagger Petstore

This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.

## Group pet

Everything about your Pets

### /v2/pet

#### Add a new pet to the store [POST]

+ Request (application/json)

    + Headers

            Accept: application/json

    + Attributes

    + Body

            {
              "name": "doggie",
              "photoUrls": [
                ""
              ],
              "id": -100000000,
              "category": {
                "id": -100000000,
                "name": ""
              },
              "tags": [
                {
                  "id": -100000000,
                  "name": ""
                }
              ],
              "status": "available"
            }

    + Schema

            {
              "allOf": [
                {
                  "$ref": "#/definitions/Pet"
                }
              ],
              "definitions": {
                "Pet": {
                  "type": "object",
                  "required": [
                    "name",
                    "photoUrls"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "category": {
                      "$ref": "#/definitions/Category"
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "doggie"
                      ]
                    },
                    "photoUrls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Tag"
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "pet status in the store",
                      "enum": [
                        "available",
                        "pending",
                        "sold"
                      ]
                    }
                  }
                },
                "Tag": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                },
                "Category": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }

+ Response 405 (application/json)

    Invalid input

+ Request (application/xml)

    + Headers

            Accept: application/json

    + Attributes

    + Schema

            {
              "allOf": [
                {
                  "$ref": "#/definitions/Pet"
                }
              ],
              "definitions": {
                "Pet": {
                  "type": "object",
                  "required": [
                    "name",
                    "photoUrls"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "category": {
                      "$ref": "#/definitions/Category"
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "doggie"
                      ]
                    },
                    "photoUrls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Tag"
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "pet status in the store",
                      "enum": [
                        "available",
                        "pending",
                        "sold"
                      ]
                    }
                  }
                },
                "Tag": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                },
                "Category": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }

+ Response 405 (application/json)

    Invalid input

#### Update an existing pet [PUT]

+ Request (application/json)

    + Headers

            Accept: application/json

    + Attributes

    + Body

            {
              "name": "doggie",
              "photoUrls": [
                ""
              ],
              "id": -100000000,
              "category": {
                "id": -100000000,
                "name": ""
              },
              "tags": [
                {
                  "id": -100000000,
                  "name": ""
                }
              ],
              "status": "available"
            }

    + Schema

            {
              "allOf": [
                {
                  "$ref": "#/definitions/Pet"
                }
              ],
              "definitions": {
                "Pet": {
                  "type": "object",
                  "required": [
                    "name",
                    "photoUrls"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "category": {
                      "$ref": "#/definitions/Category"
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "doggie"
                      ]
                    },
                    "photoUrls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Tag"
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "pet status in the store",
                      "enum": [
                        "available",
                        "pending",
                        "sold"
                      ]
                    }
                  }
                },
                "Tag": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                },
                "Category": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }

+ Response 400 (application/json)

    Invalid ID supplied

+ Request (application/xml)

    + Headers

            Accept: application/json

    + Attributes

    + Schema

            {
              "allOf": [
                {
                  "$ref": "#/definitions/Pet"
                }
              ],
              "definitions": {
                "Pet": {
                  "type": "object",
                  "required": [
                    "name",
                    "photoUrls"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "category": {
                      "$ref": "#/definitions/Category"
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "doggie"
                      ]
                    },
                    "photoUrls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Tag"
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "pet status in the store",
                      "enum": [
                        "available",
                        "pending",
                        "sold"
                      ]
                    }
                  }
                },
                "Tag": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                },
                "Category": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }

+ Response 400 (application/json)

    Invalid ID supplied

+ Request (application/json)

    + Headers

            Accept: application/json

    + Attributes

    + Body

            {
              "name": "doggie",
              "photoUrls": [
                ""
              ],
              "id": -100000000,
              "category": {
                "id": -100000000,
                "name": ""
              },
              "tags": [
                {
                  "id": -100000000,
                  "name": ""
                }
              ],
              "status": "available"
            }

    + Schema

            {
              "allOf": [
                {
                  "$ref": "#/definitions/Pet"
                }
              ],
              "definitions": {
                "Pet": {
                  "type": "object",
                  "required": [
                    "name",
                    "photoUrls"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "category": {
                      "$ref": "#/definitions/Category"
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "doggie"
                      ]
                    },
                    "photoUrls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Tag"
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "pet status in the store",
                      "enum": [
                        "available",
                        "pending",
                        "sold"
                      ]
                    }
                  }
                },
                "Tag": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                },
                "Category": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }

+ Response 404 (application/json)

    Pet not found

+ Request (application/xml)

    + Headers

            Accept: application/json

    + Attributes

    + Schema

            {
              "allOf": [
                {
                  "$ref": "#/definitions/Pet"
                }
              ],
              "definitions": {
                "Pet": {
                  "type": "object",
                  "required": [
                    "name",
                    "photoUrls"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "category": {
                      "$ref": "#/definitions/Category"
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "doggie"
                      ]
                    },
                    "photoUrls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Tag"
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "pet status in the store",
                      "enum": [
                        "available",
                        "pending",
                        "sold"
                      ]
                    }
                  }
                },
                "Tag": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                },
                "Category": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }

+ Response 404 (application/json)

    Pet not found

+ Request (application/json)

    + Headers

            Accept: application/json

    + Attributes

    + Body

            {
              "name": "doggie",
              "photoUrls": [
                ""
              ],
              "id": -100000000,
              "category": {
                "id": -100000000,
                "name": ""
              },
              "tags": [
                {
                  "id": -100000000,
                  "name": ""
                }
              ],
              "status": "available"
            }

    + Schema

            {
              "allOf": [
                {
                  "$ref": "#/definitions/Pet"
                }
              ],
              "definitions": {
                "Pet": {
                  "type": "object",
                  "required": [
                    "name",
                    "photoUrls"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "category": {
                      "$ref": "#/definitions/Category"
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "doggie"
                      ]
                    },
                    "photoUrls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Tag"
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "pet status in the store",
                      "enum": [
                        "available",
                        "pending",
                        "sold"
                      ]
                    }
                  }
                },
                "Tag": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                },
                "Category": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }

+ Response 405 (application/json)

    Validation exception

+ Request (application/xml)

    + Headers

            Accept: application/json

    + Attributes

    + Schema

            {
              "allOf": [
                {
                  "$ref": "#/definitions/Pet"
                }
              ],
              "definitions": {
                "Pet": {
                  "type": "object",
                  "required": [
                    "name",
                    "photoUrls"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "category": {
                      "$ref": "#/definitions/Category"
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "doggie"
                      ]
                    },
                    "photoUrls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Tag"
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "pet status in the store",
                      "enum": [
                        "available",
                        "pending",
                        "sold"
                      ]
                    }
                  }
                },
                "Tag": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                },
                "Category": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }

+ Response 405 (application/json)

    Validation exception

### /v2/pet/findByStatus

#### Finds Pets by status [GET /v2/pet/findByStatus{?status*}]

Multiple status values can be provided with comma separated strings

+ Parameters

    + status:  (required) - Status values that need to be considered for filter

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    successful operation

    + Attributes

    + Body

            [
              {
                "name": "doggie",
                "photoUrls": [
                  ""
                ],
                "id": -100000000,
                "category": {
                  "id": -100000000,
                  "name": ""
                },
                "tags": [
                  {
                    "id": -100000000,
                    "name": ""
                  }
                ],
                "status": "available"
              }
            ]

    + Schema

            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              },
              "definitions": {
                "Pet": {
                  "type": "object",
                  "required": [
                    "name",
                    "photoUrls"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "category": {
                      "$ref": "#/definitions/Category"
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "doggie"
                      ]
                    },
                    "photoUrls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Tag"
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "pet status in the store",
                      "enum": [
                        "available",
                        "pending",
                        "sold"
                      ]
                    }
                  }
                },
                "Tag": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                },
                "Category": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }

+ Request

    + Headers

            Accept: application/json

+ Response 400 (application/json)

    Invalid status value

### /v2/pet/findByTags

#### Finds Pets by tags [GET /v2/pet/findByTags{?tags*}]

Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.

+ Parameters

    + tags:  (required) - Tags to filter by

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    successful operation

    + Attributes

    + Body

            [
              {
                "name": "doggie",
                "photoUrls": [
                  ""
                ],
                "id": -100000000,
                "category": {
                  "id": -100000000,
                  "name": ""
                },
                "tags": [
                  {
                    "id": -100000000,
                    "name": ""
                  }
                ],
                "status": "available"
              }
            ]

    + Schema

            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              },
              "definitions": {
                "Pet": {
                  "type": "object",
                  "required": [
                    "name",
                    "photoUrls"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "category": {
                      "$ref": "#/definitions/Category"
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "doggie"
                      ]
                    },
                    "photoUrls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Tag"
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "pet status in the store",
                      "enum": [
                        "available",
                        "pending",
                        "sold"
                      ]
                    }
                  }
                },
                "Tag": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                },
                "Category": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }

+ Request

    + Headers

            Accept: application/json

+ Response 400 (application/json)

    Invalid tag value

### /v2/pet/{petId}

#### Find pet by ID [GET]

Returns a single pet

+ Parameters

    + petId (required) - ID of pet to return

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    successful operation

    + Attributes

    + Body

            {
              "name": "doggie",
              "photoUrls": [
                ""
              ],
              "id": -100000000,
              "category": {
                "id": -100000000,
                "name": ""
              },
              "tags": [
                {
                  "id": -100000000,
                  "name": ""
                }
              ],
              "status": "available"
            }

    + Schema

            {
              "allOf": [
                {
                  "$ref": "#/definitions/Pet"
                }
              ],
              "definitions": {
                "Pet": {
                  "type": "object",
                  "required": [
                    "name",
                    "photoUrls"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "category": {
                      "$ref": "#/definitions/Category"
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "doggie"
                      ]
                    },
                    "photoUrls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Tag"
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "pet status in the store",
                      "enum": [
                        "available",
                        "pending",
                        "sold"
                      ]
                    }
                  }
                },
                "Tag": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                },
                "Category": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }

+ Request

    + Headers

            Accept: application/json

+ Response 400 (application/json)

    Invalid ID supplied

+ Request

    + Headers

            Accept: application/json

+ Response 404 (application/json)

    Pet not found

#### Updates a pet in the store with form data [POST]

+ Parameters

    + petId (required) - ID of pet that needs to be updated

+ Request (application/x-www-form-urlencoded)

    + Headers

            Accept: application/json

    + Attributes - Updated name of the pet

    + Body

            name=&status=

+ Response 405 (application/json)

    Invalid input

#### Deletes a pet [DELETE]

+ Parameters

    + petId (required) - Pet id to delete

+ Request

    + Headers

            Accept: application/json
            api_key: 

+ Response 400 (application/json)

    Invalid ID supplied

+ Request

    + Headers

            Accept: application/json
            api_key: 

+ Response 404 (application/json)

    Pet not found

### /v2/pet/{petId}/uploadImage

#### uploads an image [POST]

+ Parameters

    + petId (required) - ID of pet to update

+ Request (multipart/form-data; boundary=BOUNDARY)

    + Headers

            Accept: application/json

    + Attributes - Additional data to pass to server

    + Body

            --BOUNDARY
            Content-Disposition: form-data; name="additionalMetadata"

            --BOUNDARY
            Content-Disposition: form-data; name="file"

            --BOUNDARY--

+ Response 200 (application/json)

    successful operation

    + Attributes

    + Body

            {
              "code": -100000000,
              "type": "",
              "message": ""
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32"
                },
                "type": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }

## Group store

Access to Petstore orders

### /v2/store/inventory

#### Returns pet inventories by status [GET]

Returns a map of status codes to quantities

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    successful operation

    + Attributes

    + Body

            {}

    + Schema

            {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }

### /v2/store/order

#### Place an order for a pet [POST]

+ Request

    + Headers

            Accept: application/json

    + Attributes

    + Schema

            {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "petId": {
                  "type": "integer",
                  "format": "int64"
                },
                "quantity": {
                  "type": "integer",
                  "format": "int32"
                },
                "shipDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "status": {
                  "type": "string",
                  "description": "Order Status",
                  "enum": [
                    "placed",
                    "approved",
                    "delivered"
                  ]
                },
                "complete": {
                  "type": "boolean",
                  "default": false
                }
              }
            }

+ Response 200 (application/json)

    successful operation

    + Attributes

    + Body

            {
              "id": -100000000,
              "petId": -100000000,
              "quantity": -100000000,
              "shipDate": "2019-07-23T16:08:14.806Z",
              "status": "placed",
              "complete": false
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "petId": {
                  "type": "integer",
                  "format": "int64"
                },
                "quantity": {
                  "type": "integer",
                  "format": "int32"
                },
                "shipDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "status": {
                  "type": "string",
                  "description": "Order Status",
                  "enum": [
                    "placed",
                    "approved",
                    "delivered"
                  ]
                },
                "complete": {
                  "type": "boolean",
                  "default": false
                }
              }
            }

+ Request

    + Headers

            Accept: application/json

    + Attributes

    + Schema

            {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "petId": {
                  "type": "integer",
                  "format": "int64"
                },
                "quantity": {
                  "type": "integer",
                  "format": "int32"
                },
                "shipDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "status": {
                  "type": "string",
                  "description": "Order Status",
                  "enum": [
                    "placed",
                    "approved",
                    "delivered"
                  ]
                },
                "complete": {
                  "type": "boolean",
                  "default": false
                }
              }
            }

+ Response 400 (application/json)

    Invalid Order

### /v2/store/order/{orderId}

#### Find purchase order by ID [GET]

For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions

+ Parameters

    + orderId (required) - ID of pet that needs to be fetched

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    successful operation

    + Attributes

    + Body

            {
              "id": -100000000,
              "petId": -100000000,
              "quantity": -100000000,
              "shipDate": "2019-07-23T16:08:14.808Z",
              "status": "placed",
              "complete": false
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "petId": {
                  "type": "integer",
                  "format": "int64"
                },
                "quantity": {
                  "type": "integer",
                  "format": "int32"
                },
                "shipDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "status": {
                  "type": "string",
                  "description": "Order Status",
                  "enum": [
                    "placed",
                    "approved",
                    "delivered"
                  ]
                },
                "complete": {
                  "type": "boolean",
                  "default": false
                }
              }
            }

+ Request

    + Headers

            Accept: application/json

+ Response 400 (application/json)

    Invalid ID supplied

+ Request

    + Headers

            Accept: application/json

+ Response 404 (application/json)

    Order not found

#### Delete purchase order by ID [DELETE]

For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors

+ Parameters

    + orderId (required) - ID of the order that needs to be deleted

+ Request

    + Headers

            Accept: application/json

+ Response 400 (application/json)

    Invalid ID supplied

+ Request

    + Headers

            Accept: application/json

+ Response 404 (application/json)

    Order not found

## Group user

Operations about user

### /v2/user

#### Create user [POST]

This can only be done by the logged in user.

+ Request

    + Headers

            Accept: application/json

    + Attributes

    + Schema

            {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "username": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "userStatus": {
                  "type": "integer",
                  "format": "int32",
                  "description": "User Status"
                }
              }
            }

### /v2/user/createWithArray

#### Creates list of users with given input array [POST]

+ Request

    + Headers

            Accept: application/json

    + Attributes

    + Schema

            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              },
              "definitions": {
                "User": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "username": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    },
                    "phone": {
                      "type": "string"
                    },
                    "userStatus": {
                      "type": "integer",
                      "format": "int32",
                      "description": "User Status"
                    }
                  }
                }
              }
            }

### /v2/user/createWithList

#### Creates list of users with given input array [POST]

+ Request

    + Headers

            Accept: application/json

    + Attributes

    + Schema

            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              },
              "definitions": {
                "User": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "username": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    },
                    "phone": {
                      "type": "string"
                    },
                    "userStatus": {
                      "type": "integer",
                      "format": "int32",
                      "description": "User Status"
                    }
                  }
                }
              }
            }

### /v2/user/login

#### Logs user into the system [GET /v2/user/login{?username,password}]

+ Parameters

    + username (required) - The user name for login
    
    + password (required) - The password for login in clear text

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    successful operation

    + Headers

            X-Rate-Limit: 
            X-Expires-After: 

    + Attributes

    + Body

    + Schema

            {
              "type": "string"
            }

+ Request

    + Headers

            Accept: application/json

+ Response 400 (application/json)

    Invalid username/password supplied

### /v2/user/logout

#### Logs out current logged in user session [GET]

### /v2/user/{username}

#### Get user by user name [GET]

+ Parameters

    + username (required) - The name that needs to be fetched. Use user1 for testing. 

+ Request

    + Headers

            Accept: application/json

+ Response 200 (application/json)

    successful operation

    + Attributes

    + Body

            {
              "id": -100000000,
              "username": "",
              "firstName": "",
              "lastName": "",
              "email": "",
              "password": "",
              "phone": "",
              "userStatus": -100000000
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "username": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "userStatus": {
                  "type": "integer",
                  "format": "int32",
                  "description": "User Status"
                }
              }
            }

+ Request

    + Headers

            Accept: application/json

+ Response 400 (application/json)

    Invalid username supplied

+ Request

    + Headers

            Accept: application/json

+ Response 404 (application/json)

    User not found

#### Updated user [PUT]

This can only be done by the logged in user.

+ Parameters

    + username (required) - name that need to be updated

+ Request

    + Headers

            Accept: application/json

    + Attributes

    + Schema

            {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "username": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "userStatus": {
                  "type": "integer",
                  "format": "int32",
                  "description": "User Status"
                }
              }
            }

+ Response 400 (application/json)

    Invalid user supplied

+ Request

    + Headers

            Accept: application/json

    + Attributes

    + Schema

            {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "username": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "userStatus": {
                  "type": "integer",
                  "format": "int32",
                  "description": "User Status"
                }
              }
            }

+ Response 404 (application/json)

    User not found

#### Delete user [DELETE]

This can only be done by the logged in user.

+ Parameters

    + username (required) - The name that needs to be deleted

+ Request

    + Headers

            Accept: application/json

+ Response 400 (application/json)

    Invalid username supplied

+ Request

    + Headers

            Accept: application/json

+ Response 404 (application/json)

    User not found

## Data Structures

### definitions/Order

+ id (number, optional)
+ petId (number, optional)
+ quantity (number, optional)
+ shipDate (optional)
+ status (enum, optional)
+ complete (boolean, optional)
    + Default: false

### definitions/User

+ id (number, optional)
+ username (optional)
+ firstName (optional)
+ lastName (optional)
+ email (optional)
+ password (optional)
+ phone (optional)
+ userStatus (number, optional)

### definitions/Category

+ id (number, optional)
+ name (optional)

### definitions/Tag

+ id (number, optional)
+ name (optional)

### definitions/Pet

+ id (number, optional)
+ category (definitions/Category, optional)
+ name: doggie (required)
+ photoUrls (array, required)
    +
+ tags (array, optional)
    + (definitions/Tag)
+ status (enum, optional)

### definitions/ApiResponse

+ code (number, optional)
+ type (optional)
+ message (optional)
